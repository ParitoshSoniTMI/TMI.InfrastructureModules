trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '*.bicep'
 
pr: none

pool:
  vmImage: ubuntu-latest

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  modulePrefix: 'bicep/'
  registryName: inframodules
  azureSubscription: 'Pay-As-You-Go (TMI Dev/Test) (855cfd52-2f2f-4a84-b698-8d8a995bd70f)'
 
jobs:
- job: modules
  displayName: 'Publish Bicep Modules'
  condition: eq(variables.isMain, 'true')

  steps:
  - pwsh: |
      $git_event_before = $env:BUILD_BUILDSOURCEVERSION
      Write-Host 'git event before :' $git_event_before 
      $uri = "$env:SYSTEM_TEAMFOUNDATIONSERVERURI$env:SYSTEM_TEAMPROJECT/_apis/build/builds/$($env:BUILD_BUILDID)/changes?api-version=6.1"
      Write-Host $uri
      Write-Host 'Env token: ' $env:SYSTEM_ACCESSTOKEN
      $changes = Invoke-RestMethod -Method Get -Headers @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" } -Uri $uri -Verbose
      Write-Host 'Changes: '$changes
      if ($changes.count -gt 0) {
        $firstCommit = $changes.value[$changes.count-1].id
        # Go back to the commit before the first change
        $git_event_before = git rev-parse $firstCommit~1 --
        Write-Host 'First commit: '$firstCommit
      }
      
      Write-Host "##vso[task.setvariable variable=GIT_EVENT_BEFORE]$git_event_before"
    displayName: 'Get Start Commit Id'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  - task: AzureCLI@2
    displayName: 'Publish/Update Modules to Registry'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: 'pscore'
      scriptLocation: inlineScript
      inlineScript: |
        az bicep install
        $version = Get-Date -f 'yyyy-MM-dd'
        $publishedModules = $(az acr repository list --name $(registryName) --query "[?contains(@, '$(modulePrefix)')]" -o tsv)
        Get-ChildItem -Recurse -Path ./*.bicep | Foreach-Object {
          $filename = ($_ | Resolve-Path -Relative) -replace "^./" -replace '\..*'
          # Check if module already exists in the registry
          If (-not ($publishedModules ?? @()).Contains(("$(modulePrefix)" + $filename))) {
            Write-Host "Adding new module $filename with version $version"
            az bicep publish --file $_ --target br:$(registryName).azurecr.io/bicep/${filename}:${version}
          }
        }
 
        git diff-tree --no-commit-id --name-only --diff-filter=ad -r "$(GIT_EVENT_BEFORE)..$(Build.SourceVersion)" | Where-Object {$_.EndsWith('.bicep')} | Foreach-Object {
          $moduleName = ($_ | Resolve-Path -Relative) -replace "^./" -replace '\..*'
          Write-Host "Updating module $moduleName with version $version"
          az bicep publish --file $_ --target br:$(registryName).azurecr.io/$(modulePrefix)${moduleName}:${version}
        }